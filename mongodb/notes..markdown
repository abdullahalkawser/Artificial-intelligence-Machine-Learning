# ЁЯУж MongoDB Daily Command Cheatsheet

ржПржЗ ржирзЛржЯрзЗ MongoDB-ржПрж░ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржХржорж╛ржирзНржбржЧрзБрж▓рзЛ рж╕ржВржХрзНрж╖рж┐ржкрзНрждржнрж╛ржмрзЗ ржмрж░рзНржгржирж╛ ржХрж░рж╛ рж╣рж▓рзЛ ржпрзЗржЧрзБрж▓рзЛ ржкрзНрж░рждрж┐ржжрж┐ржирзЗрж░ ржбрзЗржЯрж╛ржмрзЗрж╕ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛ржпрж╝ ржХрж╛ржЬрзЗ рж▓рж╛ржЧржмрзЗред

---

## ЁЯЧГя╕П ржбрзЗржЯрж╛ржмрзЗрж╕ рж╕ржорзНржкрж░рзНржХрж┐ржд ржХржорж╛ржирзНржб

### ЁЯФН рзз. рж╕ржм ржбрзЗржЯрж╛ржмрзЗрж╕ рж▓рж┐рж╕рзНржЯ ржХрж░рждрзЗ:
```js
show dbs
```

### тЮХ рзи. ржирждрзБржи ржбрзЗржЯрж╛ржмрзЗрж╕ рждрзИрж░рж┐ ржмрж╛ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рждрзЗ:
```js
use myDatabase
```

### тЬЕ рзй. ржмрж░рзНрждржорж╛ржирзЗ ржХрзЛржи ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ ржЖржЫрзЛ рждрж╛ ржжрзЗржЦрждрзЗ:
```js
db
```

---

## ЁЯУБ ржХрж╛рж▓рзЗржХрж╢ржи (Collection) рж╕ржорзНржкрж░рзНржХрж┐ржд ржХржорж╛ржирзНржб

### ЁЯУЛ рзк. ржбрзЗржЯрж╛ржмрзЗрж╕рзЗрж░ рж╕ржм ржХрж╛рж▓рзЗржХрж╢ржи ржжрзЗржЦрждрзЗ:
```js
show collections
```

### тЮХ рзл. ржирждрзБржи ржбрзЗржЯрж╛ ржЗржирж╕рж╛рж░рзНржЯ (ржПржХржЯрж┐ ржбржХрзБржорзЗржирзНржЯ):
```js
db.users.insertOne({ name: "Abdullah", age: 22 })
```

### тЮХтЮХ рзм. ржПржХрж╛ржзрж┐ржХ ржбржХрзБржорзЗржирзНржЯ ржЗржирж╕рж╛рж░рзНржЯ ржХрж░рждрзЗ:
```js
db.users.insertMany([
  { name: "Anisa", age: 20 },
  { name: "Rahim", age: 25 }
])
```

---

## ЁЯУД ржбрзЗржЯрж╛ рж░рж┐ржб / ржХрзЛрзЯрзЗрж░рж┐

### ЁЯФН рзн. рж╕ржм ржбрзЗржЯрж╛ рж░рж┐ржб ржХрж░рждрзЗ:
```js
db.users.find()
```

### ЁЯФН рзо. ржлрж┐рж▓рзНржЯрж╛рж░ ржХрж░рзЗ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржбрзЗржЯрж╛ ржжрзЗржЦрждрзЗ:
```js
db.users.find({ name: "Abdullah" })


```

### ЁЯФв рзп. ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржПржХржЯрж┐ ржбрзЗржЯрж╛ ржжрзЗржЦрждрзЗ: db: ржПржЯрж┐ ржмрж░рзНрждржорж╛ржи рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рж╛ ржбрж╛ржЯрж╛ржмрзЗржЬржХрзЗ ржирж┐рж░рзНржжрзЗрж╢ ржХрж░рзЗред

users: ржПржЯрж┐ ржПржХржЯрж┐ collection (ржпрзЗржЯрж╛ рж░рж┐рж▓рзЗрж╢ржирж╛рж▓ ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ table-ржПрж░ ржорждрзЛ)ред

.find(): ржПржЯрж┐ ржПржХржЯрж┐ query method, ржпрзЗржЯрж╛ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╢рж░рзНржд ржЕржирзБржпрж╛рзЯрзА ржбрзЗржЯрж╛ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рзЗред

{age: 25}: ржПржЯрж┐ рж╣рж▓рзЛ query object тАФ ржЕрж░рзНржерж╛рзО ржЖржорж░рж╛ ржПржоржи рж╕ржм ржбржХрзБржорзЗржирзНржЯ ржЪрж╛ржЗ ржпрж╛ржжрзЗрж░ ржмрзЯрж╕ (age) рзирзлред
```js
db.users.findOne({ age: 22 })

db.collection.find(query, projection)

// query: ржХрзА ржЦрзБржБржЬржмрзЗ (ржпрзЗржоржи { age: 25 })

// projection: ржХрзЛржи ржлрж┐рж▓рзНржбржЧрзБрж▓рзЛ ржжрзЗржЦрж╛ржмрзЗ (ржпрзЗржоржи { name: 1 })

[
  { "_id": 1, "name": "Abdullah", "age": 25, "city": "Dhaka" },
  { "_id": 2, "name": "Rahim", "age": 23, "city": "Chittagong" }
]


 db.users.find({}, { _id: false, name: true })

db.users.find({}) тЖТ рж╕ржм ржбрзЗржЯрж╛ ржЦрзБржБржЬржмрзЗ (query ржЕржВрж╢ ржлрж╛ржБржХрж╛, ржорж╛ржирзЗ рж╕ржм ржбрзЗржЯрж╛)

projection: { _id: false, name: true } тЖТ рж╢рзБржзрзБржорж╛рждрзНрж░ name ржлрж┐рж▓рзНржб ржжрзЗржЦрж╛ржмрзЗ, ржПржмржВ _id ржжрзЗржЦрж╛ржмрзЗ ржирж╛ред

 db.users.find({},{_id: false ,name:true})

```

db.collection.find().sort({ field: 1 })   // ascending order
db.collection.find().sort({ field: -1 })  // descending order



Limiting 

db.users.find().limit(3)

: ржкрзНрж░ржержо рзй ржЬржи ржЗржЙржЬрж╛рж░

 Combine Sorting + Limiting

 db.users.find().sort({ age: -1 }).limit(2)

---

## ЁЯФБ ржЖржкржбрзЗржЯ ржУ ржорзБржЫрж╛

### ЁЯФз рззрзж. ржПржХржЯрж┐ ржбржХрзБржорзЗржирзНржЯ ржЖржкржбрзЗржЯ ржХрж░рждрзЗ:
```js
db.users.updateOne(
  { name: "Abdullah" },
  { $set: { age: 23 } }
)
```

### ЁЯФз рззрзз. ржПржХрж╛ржзрж┐ржХ ржбржХрзБржорзЗржирзНржЯ ржЖржкржбрзЗржЯ ржХрж░рждрзЗ:
```js
db.users.updateMany(
  { age: { $lt: 25 } },
  { $set: { status: "young" } }
)
```

db.collection.updateOne(
  { filter },
  { $unset: { fieldName: "" } }
) ржорж╛ржи рж╣рж┐рж╕рзЗржмрзЗ ржЦрж╛рж▓рж┐ string ("") ржмрж╛ ржпрзЗржХрзЛржирзЛ ржХрж┐ржЫрзБ ржжрж┐рждрзЗ ржкрж╛рж░рзЛ, MongoDB рж╢рзБржзрзБ key ржжрзЗржЦрзЗржЗ ржмрзБржЭрзЗ ржирзЗрзЯ ржпрзЗ ржПржЯрж╛ ржбрж┐рж▓рж┐ржЯ ржХрж░рждрзЗ рж╣ржмрзЗред


db.collection.find({ fieldName: { $exists: true } }) $exists рж╣рж▓ ржПржХржЯрж┐ query operator ржпрж╛ ржХрзЛржирзЛ ржлрж┐рж▓рзНржб ржбржХрзБржорзЗржирзНржЯрзЗ ржЖржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржЪрзЗржХ ржХрж░рждрзЗ ржмрзНржпржмрж╣рзГржд рж╣рзЯред

 db.users.updateMany({fullTime:{$exists:false}},{$set:{fullTime:true}})
db.users.updateMany(
  { fullTime: { $exists: false } },  // Filter: documents where 'fullTime' field does NOT exist
  { $set: { fullTime: true } }       // Update: add 'fullTime' field and set it to true
)


db.users.find({
  age: { $exists: true, $gte: 23 }
})
ЁЯУМ ржЕрж░рзНрже: age ржЖржЫрзЗ, ржПржмржВ рж╕рзЗржЯрж╛ рзирзй ржмрж╛ рждрж╛рж░ ржмрзЗрж╢рж┐ред













### ЁЯЧСя╕П рззрзи. ржПржХржЯрж┐ ржбржХрзБржорзЗржирзНржЯ ржбрж┐рж▓рж┐ржЯ ржХрж░рждрзЗ:
```js
db.users.deleteOne({ name: "Abdullah" })
```

### ЁЯЧСя╕П рззрзй. ржПржХрж╛ржзрж┐ржХ ржбржХрзБржорзЗржирзНржЯ ржбрж┐рж▓рж┐ржЯ ржХрж░рждрзЗ:
```js
db.users.deleteMany({ age: { $gt: 30 } })
```

students ржХрж╛рж▓рзЗржХрж╢ржирзЗрж░ ржоржзрзНржпрзЗ ржпрзЗрж╕ржм ржбржХрзБржорзЗржирзНржЯрзЗ registerdate ржлрж┐рж▓рзНржб ржирж╛ржЗ,
 рж╕рзЗржЧрзБрж▓рзЛ ржПржХрж╕рж╛ржерзЗ ржбрж┐рж▓рж┐ржЯ ржХрж░рзЗ ржжрзЗржмрзЗред
db.students.deleteMany({ registerdate: { $exists: false } })


---

## ЁЯз░ ржЕрждрж┐рж░рж┐ржХрзНржд ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржХржорж╛ржирзНржб

### ЁЯЫая╕П рззрзк. ржХрж╛рж▓рзЗржХрж╢ржи ржбрзНрж░ржк (ржорзБржЫрзЗ ржлрзЗрж▓рж╛):
```js
db.users.drop()
```

### ЁЯзи рззрзл. ржбрзЗржЯрж╛ржмрзЗрж╕ ржбрзНрж░ржк (рж╕рж╛ржмржзрж╛ржи!):
```js
db.dropDatabase()
```

---



MongoDB Comparison Operators

// $eq => equal (рж╕ржорж╛ржи)
db.users.find({ age: { $eq: 25 } })
// ржпрзЗрж╕ржм ржбржХрзБржорзЗржирзНржЯрзЗ age == 25, рж╕рзЗржЧрзБрж▓рзЛ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗ


// $ne => not equal (ржЕрж╕ржорж╛ржи)
db.users.find({ age: { $ne: 25 } })
// ржпрзЗрж╕ржм ржбржХрзБржорзЗржирзНржЯрзЗ age != 25, рж╕рзЗржЧрзБрж▓рзЛ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗ


// $gt => greater than (ржмрзЬ)
db.users.find({ age: { $gt: 25 } })
// ржпрзЗрж╕ржм ржбржХрзБржорзЗржирзНржЯрзЗ age > 25, рж╕рзЗржЧрзБрж▓рзЛ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗ


// $gte => greater than or equal (ржмрзЬ ржмрж╛ рж╕ржорж╛ржи)
db.users.find({ age: { $gte: 25 } })
// ржпрзЗрж╕ржм ржбржХрзБржорзЗржирзНржЯрзЗ age >= 25, рж╕рзЗржЧрзБрж▓рзЛ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗ


// $lt => less than (ржЫрзЛржЯ)
db.users.find({ age: { $lt: 25 } })
// ржпрзЗрж╕ржм ржбржХрзБржорзЗржирзНржЯрзЗ age < 25, рж╕рзЗржЧрзБрж▓рзЛ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗ


// $lte => less than or equal (ржЫрзЛржЯ ржмрж╛ рж╕ржорж╛ржи)
db.users.find({ age: { $lte: 25 } })
// ржпрзЗрж╕ржм ржбржХрзБржорзЗржирзНржЯрзЗ age <= 25, рж╕рзЗржЧрзБрж▓рзЛ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗ


// $in => value exists in array (ржПржХрж╛ржзрж┐ржХ ржорж╛ржирзЗрж░ ржоржзрзНржпрзЗ ржЖржЫрзЗ)
db.users.find({ age: { $in: [22, 25, 30] } })
// age ржпржжрж┐ 22, 25 ржмрж╛ 30 рж╣рзЯ, ржПржоржи ржбрзЗржЯрж╛ ржжрзЗржЦрж╛ржмрзЗ


// $nin => value not in array (ржПржХрж╛ржзрж┐ржХ ржорж╛ржирзЗрж░ ржоржзрзНржпрзЗ ржирзЗржЗ)
db.users.find({ age: { $nin: [22, 25, 30] } })
// age ржпржжрж┐ 22, 25, 30 ржирж╛ рж╣рзЯ, ржПржоржи ржбрзЗржЯрж╛ ржжрзЗржЦрж╛ржмрзЗ

$eq: рж╕ржорж╛ржи

$ne: рж╕ржорж╛ржи ржирж╛

$gt: ржмрзЬ

$gte: ржмрзЬ ржмрж╛ рж╕ржорж╛ржи

$lt: ржЫрзЛржЯ

$lte: ржЫрзЛржЯ ржмрж╛ рж╕ржорж╛ржи

$in: ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржорж╛ржиржЧрзБрж▓рзЛрж░ ржоржзрзНржпрзЗ

$nin: ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржорж╛ржиржЧрзБрж▓рзЛрж░ ржмрж╛ржЗрж░рзЗ

MongoDB Logical Operators (рж▓ржЬрж┐ржХрзНржпрж╛рж▓ ржЕржкрж╛рж░рзЗржЯрж░)

$and	рж╕ржмржЧрзБрж▓рзЛ рж╢рж░рзНржд ржкрзВрж░ржг ржХрж░рждрзЗ рж╣ржмрзЗ
db.students.find({
  $and: [
    { age: { $gt: 18 } },
    { marks: { $gt: 80 } }
  ]
})
// тЬЕ English: Students older than 18 AND marks > 80
// тЬЕ ржмрж╛ржВрж▓рж╛: ржпрж╛ржжрзЗрж░ ржмрзЯрж╕ рззрзо-ржПрж░ ржмрзЗрж╢рж┐ ржПржмржВ ржорж╛рж░рзНржХрж╕ рзорзж-ржПрж░ ржмрзЗрж╢рж┐


$or	ржпрзЗржХрзЛржирзЛ ржПржХржЯрж┐ рж╢рж░рзНржд ржкрзВрж░ржг рж╣рж▓рзЗржЗ рж╣ржмрзЗ

db.students.find({
  $or: [
    { age: 18 },
    { marks: { $gt: 80 } }
  ]
})
// тЬЕ English: Students aged 18 OR marks > 80
// тЬЕ ржмрж╛ржВрж▓рж╛: ржпрж╛ржжрзЗрж░ ржмрзЯрж╕ рззрзо ржЕржержмрж╛ ржорж╛рж░рзНржХрж╕ рзорзж-ржПрж░ ржмрзЗрж╢рж┐

$not	ржХрзЛржирзЛ рж╢рж░рзНрждрзЗрж░ ржмрж┐ржкрж░рзАржд (NOT) ржорж╛ржи
db.students.find({
  age: { $not: { $gt: 18 } }
})
// тЬЕ English: Age NOT greater than 18
// тЬЕ ржмрж╛ржВрж▓рж╛: ржпрж╛ржжрзЗрж░ ржмрзЯрж╕ рззрзо-ржПрж░ ржмрзЗрж╢рж┐ ржирзЯ (<= 18)


$nor	рж╕ржм рж╢рж░рзНрждржЗ ржорж┐ржерзНржпрж╛ рж╣рждрзЗ рж╣ржмрзЗ
db.students.find({
  $nor: [
    { age: 18 },
    { marks: 85 }
  ]
})
// тЬЕ English: Age is not 18 AND marks is not 85
// тЬЕ ржмрж╛ржВрж▓рж╛: ржмрзЯрж╕ рззрзо ржирзЯ ржПржмржВ ржорж╛рж░рзНржХрж╕ рзорзл ржирзЯ ржПржоржи ржЫрж╛рждрзНрж░рж░рж╛



## ЁЯУМ ржирзЛржЯрж╕

- MongoDB shell ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ ржкрзНрж░рждрж┐ржЯрж┐ ржХржорж╛ржирзНржбрзЗрж░ рж╢рзЗрж╖рзЗ `;` ржирж╛ ржжрж┐рж▓рзЗржУ ржЪрж▓рзЗред
- `insertOne`, `find`, `updateOne` ржЗрждрзНржпрж╛ржжрж┐ ржорзЗржержбржЧрзБрж▓рзЛ `db.collectionName.method()` ржлрж░ржорзНржпрж╛ржЯрзЗ ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯред

---

MongoDB Index Example with Comment (English + Bangla)

// Create an index on the "name" field (ascending order)
db.users.createIndex({ name: 1 })

// ЁЯФН ржПржЯрж┐ "name" ржлрж┐рж▓рзНржбрзЗрж░ ржЙржкрж░ ржЗржиржбрзЗржХрзНрж╕ рждрзИрж░рж┐ ржХрж░ржмрзЗ ржпрж╛рждрзЗ name ржжрж┐рзЯрзЗ ржжрзНрж░рзБржд рж╕рж╛рж░рзНржЪ ржХрж░рж╛ ржпрж╛рзЯред


 2. Single Field Index (Descending)
// Create an index on the "age" field (descending order)
db.users.createIndex({ age: -1 })

// ЁЯФН ржПржЯрж┐ age ржлрж┐рж▓рзНржбрзЗ descending (ржмрзЬ ржерзЗржХрзЗ ржЫрзЛржЯ) ржЗржиржбрзЗржХрзНрж╕ рждрзИрж░рж┐ ржХрж░ржмрзЗ,
// ржпрзЗржи ржмрзЯрж╕ ржЕржирзБржпрж╛рзЯрзА descending ржнрж╛ржмрзЗ sort ржХрж░рж╛ рж╕рж╣ржЬ рж╣рзЯред


 Compound Index

 // Create index on both "name" and "age" fields
db.users.createIndex({ name: 1, age: -1 })

// ЁЯФН compound index: ржкрзНрж░ржержорзЗ name ржжрж┐рзЯрзЗ ржПржмржВ рждрж╛рж░ржкрж░ age ржжрж┐рзЯрзЗ ржЗржиржбрзЗржХрзНрж╕ ржХрж╛ржЬ ржХрж░ржмрзЗред


Multikey Index (Array field)

// Suppose each user has an array of skills
db.users.createIndex({ skills: 1 })

// ЁЯФН skills ржпржжрж┐ ржПржХржЯрж┐ ржЕрзНржпрж╛рж░рзЗ рж╣рзЯ (["Java", "Python"]), ржПржЯрж┐ ржЗржиржбрзЗржХрзНрж╕ рж╣рзЯрзЗ ржпрж╛ржмрзЗ multikey index рж╣рж┐рж╕рж╛ржмрзЗред


Text Index (Full-text Search)

// Create a text index on a field "bio"
db.users.createIndex({ bio: "text" })

// ЁЯФН bio ржлрж┐рж▓рзНржбрзЗ text search (ржпрзЗржоржи: $text operator) ржХрж░рж╛рж░ ржЬржирзНржп text index ржжрж░ржХрж╛рж░ред

 Hashed Index

 // Create a hashed index on user_id (useful for sharding)
db.users.createIndex({ user_id: "hashed" })

// ЁЯФН hashed index рж╢рж╛рж░рзНржбрж┐ржВ ржХрж░рж╛рж░ ржЬржирзНржп ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯ,
// ржпрзЗржЦрж╛ржирзЗ ржбрзЗржЯрж╛ рж╕ржоржнрж╛ржмрзЗ ржмрж┐ржнржХрзНржд ржХрж░рждрзЗ рж╣рзЯред

 Wildcard Index
 // Create wildcard index on all sub-fields of documents
db.users.createIndex({ "$**": 1 })

// ЁЯФН ржбрж╛рзЯржирж╛ржорж┐ржХ ржмрж╛ ржЕржкрж░рж┐ржЪрж┐ржд ржлрж┐рж▓рзНржбрзЗржУ ржЗржиржбрзЗржХрзНрж╕ ржХрж░рж╛ ржпрж╛рзЯ, ржмрж┐рж╢рзЗрж╖ ржХрж░рзЗ ржпрзЗрж╕ржм ржбрзЗржЯрж╛рж░ рж╕рзНржЯрзНрж░рж╛ржХржЪрж╛рж░ ржнрж┐ржирзНржиред


 Show All Indexes
 db.users.getIndexes()

// ЁЯФН ржПржЗ ржХржорж╛ржирзНржб ржжрж┐рзЯрзЗ ржЖржкржирж┐ ржжрзЗржЦрждрзЗ ржкрж╛рж░ржмрзЗржи, ржХрзЛржи ржХрзЛржи ржЗржиржбрзЗржХрзНрж╕ рждрзИрж░рж┐ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред

тЭМ Drop Index

// Drop index by name
db.users.dropIndex("name_1")

// ЁЯФН name_1 рж╣рж▓ ржЗржиржбрзЗржХрзНрж╕рзЗрж░ ржирж╛ржо, ржпрзЗржЯрж╛ ржЖржкржирж┐ getIndexes() ржжрж┐рзЯрзЗ ржжрзЗржЦрзЗ ржирж┐рждрзЗ ржкрж╛рж░рзЗржиред


тЭМ Drop All Indexes
db.users.dropIndexes()

// ЁЯФН ржПржЯрж╛ ржжрж┐рзЯрзЗ рж╕ржм ржЗржиржбрзЗржХрзНрж╕ ржорзБржЫрзЗ ржпрж╛ржмрзЗ, рж╢рзБржзрзБ _id ржЗржиржбрзЗржХрзНрж╕ ржЫрж╛рзЬрж╛ред



Performance Tip:
js
Copy
Edit
db.users.find({ name: "Anu" }).explain("executionStats")

// ЁЯФН explain("executionStats") ржжрж┐рзЯрзЗ ржжрзЗржЦрж╛ ржпрж╛рзЯ, ржХрзЛрзЯрзЗрж░рж┐ ржЗржиржбрзЗржХрзНрж╕ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржЫрзЗ ржХрж┐ржирж╛ред










cd "C:/Users/abdul/Downloads/mongosh-2.5.6-win32-x64/mongosh-2.5.6-win32-x64/bin"
./mongosh.exe

ЁЯУЪ **ржЙржкржХрж╛рж░рж┐ рж░рж┐рж╕рзЛрж░рзНрж╕:**
- [MongoDB Documentation](https://www.mongodb.com/docs/)
- [MongoDB University (Free Courses)](https://university.mongodb.com/)
