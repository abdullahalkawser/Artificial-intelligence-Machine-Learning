import numpy as np

a = np.array([1, 2, 3, 4])
b = 10

# Scalar addition
c = a + b

print("Array a:", a)
print("Scalar b:", b)
print("Result:", c) #Scalar 10 automatically [10,10,10,10] ‡¶π‡ßü‡ßá ‡¶ó‡¶ø‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø element ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§



# 1D array + 1D array (different shapes)


a = np.array([[1], [2], [3]])  # shape (3,1)
b = np.array([10, 20, 30])     # shape (3,)

# Broadcasting
c = a + b

print("Array a:\n", a)
print("Array b:", b)
print("Result:\n", c) # a ‡¶è‡¶∞ shape (3,1), b ‡¶è‡¶∞ shape (3,) ‚Üí NumPy automatically b ‡¶ï‡ßá (1,3) ‡¶¨‡¶æ‡¶®‡¶ø‡ßü‡ßá broadcasting ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§ ‡¶´‡¶≤‡ßá ‡¶∏‡¶¨ element-wise ‡¶Ø‡ßã‡¶ó ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§




#2D array + 1D array
a = np.array([[1, 2, 3],
              [4, 5, 6]])
b = np.array([10, 20, 30])

# Broadcasting along rows
c = a + b

print("Result:\n", c)
# a ‡¶è‡¶∞ shape (2,3), b ‡¶è‡¶∞ shape (3,) ‚Üí NumPy automatically b ‡¶ï‡ßá (1,3) ‡¶¨‡¶æ‡¶®‡¶ø‡ßü‡ßá broadcasting ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§ ‡¶´‡¶≤‡ßá ‡¶∏‡¶¨ element-wise ‡¶Ø‡ßã‡¶ó ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø row ‡¶è b ‡¶Ø‡ßã‡¶ó ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§



# 6Ô∏è‚É£ Important Notes / ‡¶ü‡¶ø‡¶™‡¶∏

# Broadcasting memory efficient, ‡¶ï‡¶æ‡¶∞‡¶£ actual copy ‡¶π‡ßü ‡¶®‡¶æ‡•§

# ‡¶∏‡¶¨ ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ arithmetic operation ‡¶è ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá: +, -, *, /‡•§

# Shape mismatch ‡¶π‡¶≤‡ßá ValueError ‡¶Ü‡¶∏‡ßá‡•§

# üí° Tip:

# Scalar + array ‚Üí ‡¶∏‡¶¨ element ‡¶è apply

# Row/Column-wise addition ‚Üí broadcasting ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞