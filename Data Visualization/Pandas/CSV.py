# üîπ What is CSV?

# English:
# CSV (Comma-Separated Values) is a plain text file where each row represents a record and values are separated by commas.

# Bangla:
# CSV ‡¶π‡¶≤‡ßã ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø row ‡¶è‡¶ï‡¶ü‡¶ø record ‡¶è‡¶¨‡¶Ç comma (,) ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶•‡¶æ‡¶ï‡ßá‡•§


# pd.read_csv("file.csv") ‚Üí CSV ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡ßú‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§

# Parameters:

# sep=";" ‚Üí separator change

# names=[...] ‚Üí custom column names

# index_col=0 ‚Üí ‡¶ï‡ßã‡¶® ‡¶ï‡¶≤‡¶æ‡¶Æ‡¶ï‡ßá index ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá

# skiprows=n ‚Üí n ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶ï row skip

# nrows=n ‚Üí ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶ï row ‡¶™‡ßú‡¶§‡ßá

# na_values=["NA"] ‚Üí missing value handle

# encoding="utf-8" ‚Üí encoding problem solve

# Functions after reading:

# df.head() ‚Üí ‡¶™‡ßç‡¶∞‡¶•‡¶Æ 5 row

# df.tail() ‚Üí ‡¶∂‡ßá‡¶∑‡ßá‡¶∞ 5 row

# df.info() ‚Üí ‡¶°‡ßá‡¶ü‡¶æ ‡¶ü‡¶æ‡¶á‡¶™ ‡¶ì summary

# df.describe() ‚Üí ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ó‡¶§ ‡¶ï‡¶≤‡¶æ‡¶Æ‡ßá‡¶∞ statistics


import pandas as pd

df = pd.read_csv(r"C:\Users\abdul\Desktop\Ai\Machine-Learning-Data-Science\Pandas\data.csv")

# print(df)   # First 5 rows

# e =df.loc[0:10,["Name","Age","CGPA"]] # Select specific columns and rows

e = df.loc[0:10, 'Name' : 'CGPA']  # Select specific columns and rows using range
print(e)

# e =df.loc[[1,4,7],["Name","Age","CGPA"]] # Select specific rows by index  
# print(e) 



# Common Parameters
# ‚úÖ Change Separator
# df = pd.read_csv("data.csv", sep=";")


# üëâ ‡¶Ø‡¶¶‡¶ø ‡¶°‡ßá‡¶ü‡¶æ ; ‡¶¶‡¶ø‡ßü‡ßá separate ‡¶•‡¶æ‡¶ï‡ßá‡•§

# ‚úÖ Custom Column Names
# df = pd.read_csv("data.csv", names=['Name','Age','CGPA'], header=None)

# ‚úÖ Index Column
# df = pd.read_csv("data.csv", index_col=0)


# üëâ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶ï‡¶≤‡¶æ‡¶Æ‡¶ï‡ßá index ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá‡•§

# ‚úÖ Handle Missing Values
# df = pd.read_csv("data.csv", na_values=["NA", "Missing"])

# ‚úÖ Skip Rows
# df = pd.read_csv("data.csv", skiprows=2)


# üëâ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ 2 ‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶¶ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§

# ‚úÖ Read Only Some Rows
# df = pd.read_csv("data.csv", nrows=5)


# üëâ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ 5 row ‡¶™‡ßú‡¶¨‡ßá‡•§

# ‚úÖ Encoding Problem Fix
# df = pd.read_csv("data.csv", encoding="utf-8")

# üîπ Example CSV File (data.csv)
# Name,Age,CGPA
# Anu,20,3.5
# Rahman,22,3.8
# Abdullah,21,3.9

# # üîπ Example Code
# import pandas as pd

# df = pd.read_csv("data.csv")

# print(df.head())        # ‡¶™‡ßç‡¶∞‡¶•‡¶Æ 5 row
# print(df.columns)       # ‡¶ï‡¶≤‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ
# print(df.info())        # summary
# print(df.describe())    # statistics
# print(df.columns())     


# df.sample() ‡¶π‡¶≤‡ßã Pandas DataFrame ‡¶è‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶Ø‡¶æ randomly row(s) select ‡¶ï‡¶∞‡ßá‡•§

# üîπ Example with your Sample Data
# import pandas as pd

# # Read the sample CSV
# df = pd.read_csv("/mnt/data/sample_data.csv")

# # Randomly select one row
# random_row = df.sample()
# print(random_row)


# Output (example, random every time):

#       Name  Age  CGPA Dept
# 2  Abdullah   21   3.9  CSE

# üîπ Select Multiple Random Rows
# df.sample(n=2)   # randomly 2 rows

# üîπ Random Rows with Fraction
# df.sample(frac=0.4)  # 40% rows randomly

# üîπ Reset Random Seed
# df.sample(n=2, random_state=42)  # deterministic random selection


# Bangla Summary:

# df.sample() ‚Üí ‡¶è‡¶ï ‡¶¨‡¶æ ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï row randomly select ‡¶ï‡¶∞‡ßá‡•§

# n ‚Üí number of rows

# frac ‚Üí fraction of rows

# random_state ‚Üí ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü seed ‡¶¶‡¶ø‡ßü‡ßá same rows ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ



Access Data with loc & iloc
1. loc (Label-based access)

English: Access rows/columns using labels (names).

‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: Row ‡¶¨‡¶æ column ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá data access ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡ßü‡•§

‚úÖ Example:

import pandas as pd

data = {
    "Name": ["Anis", "Rahim", "Karim"],
    "Age": [23, 25, 21],
    "CGPA": [3.5, 3.8, 3.2]
}

df = pd.DataFrame(data, index=["s1", "s2", "s3"])

# Single row by label
print(df.loc["s1"])

# Multiple rows by label
print(df.loc[["s1", "s3"]])

# Specific row & column
print(df.loc["s2", "CGPA"])

# Slice rows with labels
print(df.loc["s1":"s2"])  


Output:

Name     Anis
Age        23
CGPA      3.5
Name: s1, dtype: object

    Name  Age  CGPA
s1  Anis   23   3.5
s3  Karim  21   3.2

3.8

    Name  Age  CGPA
s1  Anis   23   3.5
s2  Rahim  25   3.8

2. iloc (Integer-location based access)

English: Access rows/columns using integer positions (index numbers).

‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: Row ‡¶¨‡¶æ column serial index number (0,1,2...) ‡¶¶‡¶ø‡ßü‡ßá data access ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§

‚úÖ Example:

# Single row by index number
print(df.iloc[0])

# Multiple rows by index number
print(df.iloc[[0, 2]])

# Specific row & column by position
print(df.iloc[1, 2])

# Slice rows with index numbers
print(df.iloc[0:2])


Output:

Name     Anis
Age        23
CGPA      3.5
Name: s1, dtype: object

    Name  Age  CGPA
s1  Anis   23   3.5
s3  Karim  21   3.2

3.8

    Name  Age  CGPA
s1  Anis   23   3.5
s2  Rahim  25   3.8

üìù Notes

loc ‚Üí label ‡¶¶‡¶ø‡ßü‡ßá data access

Row/Column name ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡ßü‡•§

Example: df.loc["s2", "CGPA"]

iloc ‚Üí index number ‡¶¶‡¶ø‡ßü‡ßá data access

Row/Column-‡¶è‡¶∞ position (0,1,2‚Ä¶) ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡ßü‡•§

Example: df.iloc[1, 2]

Key Difference:

loc["s1"] ‚Üí Label "s1" ‡¶¶‡¶ø‡ßü‡ßá access‡•§

iloc[0] ‚Üí ‡¶™‡ßç‡¶∞‡¶•‡¶Æ row (index=0) access‡•§