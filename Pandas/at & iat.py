# üìò Pandas: at & iat (Single Value Access)
# 1. at (Label-based single value access)

# English: Used to get/set a single value in DataFrame using row label + column label.

# ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: Row-‡¶è‡¶∞ ‡¶®‡¶æ‡¶Æ (label) ‡¶Ü‡¶∞ Column-‡¶è‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡ßü‡ßá ‡¶è‡¶ï‡¶ü‡¶æ cell-‡¶è‡¶∞ data access ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡ßü‡•§

# ‚úÖ Example:

import pandas as pd

data = {
    "Name": ["Anis", "Rahim", "Karim"],
    "Age": [23, 25, 21],
    "CGPA": [3.5, 3.8, 3.2]
}

df = pd.DataFrame(data, index=["s1", "s2", "s3"])

# # Single value access
# print(df.at["s2", "CGPA"])   # Row label = s2, Column label = CGPA

# # Update single value
# df.at["s3", "Age"] = 22
# print(df)

# 2. iat (Integer-location based single value access)

# English: Used to get/set a single value in DataFrame using row index + column index (numbers).

# ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: Row-‡¶è‡¶∞ position number ‡¶Ü‡¶∞ Column-‡¶è‡¶∞ position number ‡¶¶‡¶ø‡ßü‡ßá ‡¶è‡¶ï‡¶ü‡¶æ cell-‡¶è‡¶∞ data access ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§

# Single value access
print(df.iat[2, 2])   # Row index = 1, Column index = 2

# # Update single value
df.iat[1, 1] = 24
print(df)


# Notes

# at ‚Üí Label ‡¶¶‡¶ø‡ßü‡ßá single value access

# Faster than loc when working with only one value.

# Example: df.at["s2", "CGPA"]

# iat ‚Üí Index number ‡¶¶‡¶ø‡ßü‡ßá single value access

# Faster than iloc for only one value.

# Example: df.iat[1, 2]

# Key Difference:

# at["s2", "CGPA"] ‚Üí row label + column label ‡¶¶‡¶ø‡ßü‡ßá access‡•§

# iat[1, 2] ‚Üí row index + column index ‡¶¶‡¶ø‡ßü‡ßá access‡•§